Files to submit:

plotting_service.py
NNOptimizationTestBoyko.java
CountOnesTest.java
FlipFlopTest.java
FourPeaksTest.java
KnapsackTest.java


Prerequisites:
Java >= 8, python, numpy, matplotlib

Part 1.1 - RHC in place of backpropagation

To generate DATA for the Learning Curve graph by iterations:

java -classpath ABAGAIL-Boyko.jar project2_cs7641.NNOptimizationTestBoyko RHC

FOR SA or GA, just pass SA or GA instead of RHC, e.g. java -classpath ABAGAIL-Boyko.jar project2_cs7641.NNOptimizationTestBoyko SA

Note: GA takes about 3.5 minutes to run

Note: The following command will take a longer time, especially for GA -
To generate DATA for the Learning Curve graph by iterations AND training sizes:

java -classpath ABAGAIL-Boyko.jar project2_cs7641.NNOptimizationTestBoyko RHC training_sizes

FOR SA or GA, just pass SA or GA instead of RHC, e.g. java -classpath ABAGAIL-Boyko.jar project2_cs7641.NNOptimizationTestBoyko SA training_sizes
Note: GA takes about 25 minutes to run

To Generate the actual graphs which will be .png files
From the directory where the java command was run:

python plotting_service.py RHC

FOR SA or GA, replace RHC with SA or GA

This generates two .png Learning Curve Graph files in the run directory:

learning_curve_iterations_RHC.png
learning_curve_training_sizes_RHC.png


To duplicate the results from the CountOnesTest:

java -classpath ABAGAIL-Boyko.jar opt.test.CountOnesTest

To duplicate the results from Alternating Ones:

java -classpath ABAGAIL-Boyko.jar opt.test.FlipFlopTest

To duplicate the results from FourPeaksTest:

java -classpath ABAGAIL-Boyko.jar opt.test.FourPeaksTest

Note: I've limited Mimic to only 100 iterations, so it will likely not converge as the run documented in the report - that one ran for 2000 iterations, which took 7 minutes

To duplicate the results from KnapsackTest:

java -classpath ABAGAIL-Boyko.jar opt.test.KnapsackTest







